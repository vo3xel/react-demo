{"version":3,"sources":["serviceWorker.js","helpers/auth-header.js","helpers/fake-backend.js","services/auth.service.js","services/user.service.js","helpers/handle-response.js","helpers/history.js","helpers/request-options.js","constants/alert.constants.js","constants/auth.constants.js","constants/user.constants.js","constants/three.constants.js","reducers/auth.reducer.js","reducers/three.reducer.js","reducers/index.js","reducers/alert.reducer.js","reducers/user.reducer.js","helpers/store.js","actions/auth.actions.js","actions/alert.actions.js","actions/user.actions.js","actions/three.actions.js","components/UserDetails/UserDetails.js","components/ThreeScene/Box.js","components/ThreeScene/ThreeScene.js","App.js","index.js","config/dev.js","components/MenuBar/MenuBar.js","logo.svg"],"names":["Boolean","window","location","hostname","match","user","JSON","parse","localStorage","getItem","token","fakeBackendInfo","url","console","log","users","id","userName","password","email","firstName","lastName","fetch","config","get","requestOptions","postRequest","stringify","then","handleResponse","setItem","removeItem","getUserDetails","userId","getRequest","response","text","data","ok","status","userService","logout","error","message","statusText","Promise","reject","createBrowserHistory","method","headers","authHeader","body","GET_USER_DETAILS_REQUEST","GET_USER_DETAILS_SUCCESS","GET_USER_DETAILS_FAILURE","initialState","loggedIn","boxScale","combinedReducers","combineReducers","alert","state","action","type","alertConstants","auth","authConstants","loggingIn","three","threeConstants","scale","userConstants","loading","SET_USER_ID","loggerMiddleware","createLogger","createStore","undefined","applyMiddleware","thunkMiddleware","username","dispatch","authService","success","history","push","failure","alertActions","clear","request","StyledUserInformation","styled","div","userDetails","useSelector","useDispatch","useEffect","userActions","Row","Col","lg","Card","Body","Title","Text","OverlayTrigger","trigger","placement","overlay","Popover","as","Content","Button","DropdownButton","title","Dropdown","Item","onClick","threeActions","props","useState","hovered","setHover","active","setActive","mesh","useRef","useFrame","current","rotation","x","y","ref","e","onPointerOver","onPointerOut","attach","args","color","store","useStore","style","height","position","Box","StyledDiv","rootElement","document","getElementById","set","warn","realFetch","opts","resolve","setTimeout","endsWith","params","filteredUsers","filter","length","responseJson","configureFakeBackend","ReactDOM","render","Navbar","expand","variant","bg","Brand","Nav","className","Form","inline","authActions","icon","faSignOutAlt","faSignInAlt","Container","fluid","src","logo","alt","ThreeScene","UserDetails","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.9246ef70.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","export default () => {\r\n    let user = JSON.parse(localStorage.getItem('user'))\r\n    if (user && user.token) {\r\n        return { 'Authorization': 'Bearer ' + user.token }\r\n    } else {\r\n        return {}\r\n    }\r\n}","const fakeBackendInfo = (url) => console.log(`FAKE BACKEND: [${url}]`)\r\n\r\nconst users = [{ id: 1, userName: 'vo3xel', password: '123456', email: 'vo3xel@gmail.com', firstName: 'Michael', lastName: 'Spitzer'}]\r\n\r\nexport default () => {\r\n    let realFetch = window.fetch\r\n    window.fetch = function (url, opts) {\r\n        return new Promise((resolve, reject) => {\r\n            // wrap in timeout to simulate server api call\r\n            setTimeout(() => {\r\n\r\n                // authenticate\r\n                if (url.endsWith('/auth') && opts.method === 'POST') {\r\n                    fakeBackendInfo(url)\r\n                    // get parameters from post request\r\n                    let params = JSON.parse(opts.body)\r\n\r\n                    // find if any user matches login credentials\r\n                    let filteredUsers = users.filter(user => {\r\n                        return user.userName === params.userName && user.password === params.password\r\n                    });\r\n\r\n                    if (filteredUsers.length) {\r\n                        // if login details are valid return user details and fake jwt token\r\n                        let user = filteredUsers[0]\r\n                        let responseJson = {\r\n                            id: user.id,\r\n                            userName: user.userName,\r\n                            firstName: user.firstName,\r\n                            lastName: user.lastName,\r\n                            token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE1NzkzNTQ4ODMsImlhdCI6MTU3OTI2ODQ3OCwic3ViIjoyfQ.oCY-MSL9c9GSvt2Osf7Q-Z9XRA_OhgXjP_kETdwFps4'\r\n                        }\r\n                        resolve({ ok: true, text: () => Promise.resolve(JSON.stringify(responseJson)) })\r\n                    } else {\r\n                        // else return error\r\n                        reject('Username or password is incorrect');\r\n                    }\r\n\r\n                    return;\r\n                }\r\n\r\n                // get fake user information\r\n                if (url.endsWith('/user/1') && opts.method === 'GET') {\r\n                    fakeBackendInfo(url)\r\n                    resolve({ ok: true, text: () => Promise.resolve(JSON.stringify(users[0])) })\r\n                    return\r\n                }\r\n\r\n                // pass through any requests not handled above\r\n                fakeBackendInfo(url + \" - request NOT handled by fake-backend => passed through\")\r\n                realFetch(url, opts).then(response => resolve(response))\r\n            }, 500)\r\n        })\r\n    }\r\n}","import config from 'react-global-configuration'\r\nimport { requestOptions } from '../helpers'\r\nimport { handleResponse } from '../helpers'\r\n\r\nconst login = (userName, password) => fetch(`${config.get('apiUrl')}/auth`, requestOptions.postRequest(JSON.stringify({ userName, password })))\r\n        .then(handleResponse)\r\n        .then(user => {\r\n            localStorage.setItem('user', JSON.stringify(user));\r\n            return user;\r\n        })\r\n\r\nconst logout = () => localStorage.removeItem('user')\r\n\r\nexport default { login, logout }","import config from 'react-global-configuration'\r\nimport { requestOptions } from '../helpers'\r\nimport { handleResponse } from '../helpers'\r\n\r\nconst getUserDetails = (userId) => fetch(`${config.get('apiUrl')}/user/${userId}`, requestOptions.getRequest).then(handleResponse)\r\n\r\nexport default { getUserDetails }","import { userService } from '../services'\r\n\r\nexport default (response) => {\r\n    return response.text().then(text => {\r\n        const data = text && JSON.parse(text)\r\n        if (!response.ok) {\r\n            if (response.status === 401) {\r\n                // auto logout if 401 response returned from api\r\n                userService.logout()\r\n            }\r\n            const error = (data && data.message) || response.statusText\r\n            return Promise.reject(error)\r\n        }\r\n        return data\r\n    });\r\n}","import { createBrowserHistory } from 'history'\r\n\r\nexport default createBrowserHistory()","import { authHeader } from './'\r\n\r\nconst getRequest = { method: 'GET', headers: authHeader() }\r\n\r\nconst postRequest = (body = '') => ({ method: 'POST', headers: { ...authHeader(), ...{ 'Content-Type': 'application/json' }}, body })\r\n\r\nexport default { getRequest, postRequest }","export default {\r\n    SUCCESS: 'ALERT_SUCCESS',\r\n    ERROR: 'ALERT_ERROR',\r\n    CLEAR: 'ALERT_CLEAR'\r\n}","export default {\r\n    LOGIN_REQUEST: 'LOGIN_REQUEST',\r\n    LOGIN_SUCCESS: 'LOGIN_SUCCESS',\r\n    LOGIN_FAILURE: 'LOGIN_FAILURE',\r\n    \r\n    LOGOUT: 'LOGOUT'\r\n}","export default {\r\n    GET_USER_DETAILS_REQUEST: 'GET_USER_DETAILS_REQUEST',\r\n    GET_USER_DETAILS_SUCCESS: 'GET_USER_DETAILS_SUCCESS',\r\n    GET_USER_DETAILS_FAILURE: 'GET_USER_DETAILS_FAILURE'\r\n}","export default {\r\n    SET_BOX_SCALE: 'SET_BOX_SCALE'\r\n}","import { authConstants } from '../constants';\r\n\r\nlet user = JSON.parse(localStorage.getItem('user'));\r\nconst initialState = user ? { loggedIn: true, user } : {};\r\n\r\nexport default (state = initialState, action) => {\r\n    switch (action.type) {\r\n        \r\n    case authConstants.LOGIN_REQUEST:\r\n        return {\r\n            loggingIn: true,\r\n        }\r\n\r\n    case authConstants.LOGIN_SUCCESS:\r\n        return {\r\n            loggedIn: true,\r\n            userId: action.user.id\r\n        }\r\n\r\n    case authConstants.LOGIN_FAILURE:\r\n        return { }\r\n\r\n    default:\r\n        return state\r\n    }\r\n}","import { threeConstants } from '../constants';\r\n\r\nconst initialState = { boxScale: 1};\r\n\r\nexport default (state = initialState, action) => {\r\n    switch (action.type) {\r\n        \r\n    case threeConstants.SET_BOX_SCALE:\r\n        return { boxScale: action.scale }\r\n\r\n    default:\r\n        return state\r\n    }\r\n}","\r\nimport { default as alert } from './alert.reducer'\r\nimport { default as user } from './user.reducer'\r\nimport { default as auth } from './auth.reducer'\r\nimport { default as three } from './three.reducer'\r\nimport { authConstants } from '../constants'\r\n\r\nimport { combineReducers } from 'redux'\r\n\r\nconst combinedReducers = combineReducers({\r\n    alert,\r\n    auth,\r\n    three,\r\n    user\r\n})\r\n\r\nexport default (state, action) => {\r\n    if (action.type === authConstants.LOGOUT){\r\n      state = undefined\r\n    }\r\n    return combinedReducers(state, action)\r\n}","import { alertConstants } from '../constants'\r\n\r\n export default (state = {}, action) => {\r\n    switch (action.type) {\r\n    case alertConstants.SUCCESS:\r\n        return {\r\n            type: 'alert-success',\r\n            message: action.message\r\n        };\r\n    case alertConstants.ERROR:\r\n        return {\r\n            type: 'alert-danger',\r\n            message: action.message\r\n        };\r\n    case alertConstants.CLEAR:\r\n        return {}\r\n    default:\r\n        return state\r\n    }\r\n}","import { userConstants } from '../constants'\r\n\r\nexport default (state = {}, action) => {\r\n    switch (action.type) {\r\n    case userConstants.GET_USER_DETAILS_REQUEST:\r\n        return { ...state, loading: true }\r\n\r\n    case userConstants.GET_USER_DETAILS_SUCCESS:\r\n        return { ...state, user: action.user, loading: false }\r\n\r\n    case userConstants.GET_USER_DETAILS_FAILURE:\r\n        return { ...state, error: action.error, loading: false }\r\n\r\n    case userConstants.SET_USER_ID:\r\n        return { ...state, userId: action.userId, loading: false }\r\n        \r\n    default:\r\n        return state\r\n    }\r\n}","import { createStore, applyMiddleware } from 'redux'\r\nimport  { default as allReducers } from '../reducers'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { createLogger } from 'redux-logger'\r\n\r\nconst loggerMiddleware = createLogger()\r\n\r\nexport default createStore(\r\n    allReducers, \r\n    applyMiddleware(\r\n        thunkMiddleware,\r\n        loggerMiddleware,\r\n    )\r\n)","import { authConstants } from '../constants'\r\nimport { authService } from '../services'\r\nimport { history } from '../helpers'\r\nimport { alertActions } from './'\r\n\r\nconst login = (username, password) => {\r\n\r\n    const request = (user) => ({ type: authConstants.LOGIN_REQUEST, user })\r\n    const success = (user) => ({ type: authConstants.LOGIN_SUCCESS, user })\r\n    const failure = (error) => ({ type: authConstants.LOGIN_FAILURE, error })\r\n\r\n    return dispatch => {\r\n        dispatch(request({ username }))\r\n\r\n        authService.login(username, password)\r\n            .then(\r\n                user => { \r\n                    dispatch(success(user))\r\n                    history.push('/')\r\n                },\r\n                error => {\r\n                    dispatch(failure(error));\r\n                    dispatch(alertActions.error(error))\r\n                }\r\n            );\r\n    };\r\n}\r\n\r\nconst logout = () => {\r\n    authService.logout();\r\n    return { type: authConstants.LOGOUT }\r\n}\r\n\r\nexport default { login, logout }","import { alertConstants } from '../constants'\r\n\r\nconst success = (message) =>  ({ type: alertConstants.SUCCESS, message })\r\n\r\nconst error = (message) => ({ type: alertConstants.ERROR, message })\r\n\r\nconst clear = () => ({ type: alertConstants.CLEAR })\r\n\r\nexport default { success, error, clear }","import { userConstants } from '../constants'\r\nimport { userService } from '../services'\r\nimport { history } from '../helpers'\r\nimport { alertActions } from './'\r\n\r\nconst getUserDetails = (userId) => {\r\n    \r\n    const request = (userId) => ({ type: userConstants.GET_USER_DETAILS_REQUEST, userId })\r\n    const success = (user) => ({ type: userConstants.GET_USER_DETAILS_SUCCESS, user })\r\n    const failure = (error) => ({ type: userConstants.GET_USER_DETAILS_FAILURE, error })\r\n\r\n    return dispatch => {\r\n        dispatch(request(userId))\r\n        userService.getUserDetails(userId)\r\n            .then(\r\n                user => { \r\n                    dispatch(success(user))\r\n                    history.push('/')\r\n                },\r\n                error => {\r\n                    dispatch(failure(error))\r\n                    dispatch(alertActions.error(error))\r\n                }\r\n            )\r\n    }\r\n}\r\n\r\nconst setUserId = (userId) => ({ type: userConstants.SET_USER_ID, userId })\r\n\r\nexport default { getUserDetails, setUserId }","import { threeConstants } from \"../constants\";\r\n\r\nconst setBoxScale = (scale) => ({ type: threeConstants.SET_BOX_SCALE, scale })\r\n\r\nexport default { setBoxScale }","import { useSelector, useDispatch } from 'react-redux'\r\nimport React, { useEffect } from 'react'\r\nimport { userActions } from '../../actions'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Popover from 'react-bootstrap/Popover'\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger'\r\nimport styled from 'styled-components'\r\nimport DropdownButton from 'react-bootstrap/DropdownButton'\r\nimport Dropdown from 'react-bootstrap/Dropdown'\r\nimport Card from 'react-bootstrap/Card'\r\nimport { threeActions } from '../../actions'\r\n\r\nconst StyledUserInformation = styled.div`\r\n  display: block;\r\n  font-size: 20px;\r\n  margin-left: 15px;\r\n  margin-right: 15px;\r\n`\r\n\r\nconst popover = (userDetails) => (\r\n    <Popover id=\"popover-basic\">\r\n        <Popover.Title as=\"h2\">User details</Popover.Title>\r\n        <Popover.Content>\r\n            <StyledUserInformation>\r\n                <strong>id: </strong> { userDetails.id } <br />\r\n                <strong>userName: </strong> { userDetails.userName } <br />\r\n                <strong>password: </strong> { userDetails.password } <br />\r\n                <strong>email: </strong> { userDetails.email } <br />\r\n                <strong>firstName: </strong> { userDetails.firstName } <br />\r\n                <strong>lastName: </strong> { userDetails.lastName } <br />\r\n             </StyledUserInformation>\r\n        </Popover.Content>\r\n    </Popover>\r\n)\r\n\r\nexport default () => {\r\n\r\n    const { user } = useSelector(state => state.user)\r\n    const { userId } = useSelector(state => state.auth)\r\n    \r\n    const dispatch = useDispatch()\r\n    \r\n    useEffect(() => {\r\n        dispatch(userActions.getUserDetails(userId))\r\n    },[userId, dispatch])\r\n\r\n    return (\r\n        <Row>\r\n            <Col lg={6}>\r\n                <Card>\r\n                    <Card.Body>\r\n                        <Card.Title>Authenticated user action: get user details</Card.Title>\r\n                        <Card.Text>This action returns detailed information about the logged in user.</Card.Text>\r\n                        { user && \r\n                            <OverlayTrigger trigger=\"click\" placement=\"right\" overlay={popover(user)}>\r\n                                <Button>Get details of user</Button>\r\n                            </OverlayTrigger>\r\n                        }\r\n                    </Card.Body>\r\n                </Card>   \r\n            </Col>\r\n            <Col lg={6}>\r\n                <Card>\r\n                    <Card.Body>\r\n                        <Card.Title>Authenticated user action: set threejs scene box size</Card.Title>\r\n                        <Card.Text>This action sets the box size in the threejs scene.</Card.Text>\r\n                        { user && \r\n                            <DropdownButton id=\"dropdown-basic-button\" title=\"Box size\">\r\n                                <Dropdown.Item onClick={() => dispatch(threeActions.setBoxScale(1))}>1</Dropdown.Item>\r\n                                <Dropdown.Item onClick={() => dispatch(threeActions.setBoxScale(1.5))}>1.5</Dropdown.Item>\r\n                                <Dropdown.Item onClick={() => dispatch(threeActions.setBoxScale(2))}>2</Dropdown.Item>\r\n                                <Dropdown.Item onClick={() => dispatch(threeActions.setBoxScale(2.5))}>2.5</Dropdown.Item>\r\n                            </DropdownButton>\r\n                        }\r\n                    </Card.Body>\r\n                </Card>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}","import React, { useRef, useState } from 'react'\r\nimport { useFrame } from 'react-three-fiber'\r\nimport { useSelector } from 'react-redux'\r\n\r\nexport default (props) => {\r\n\r\n    const [hovered, setHover] = useState(false)\r\n    const [active, setActive] = useState(false)\r\n    \r\n    const { boxScale } = useSelector(state => state.three)\r\n\r\n    const mesh = useRef()\r\n    \r\n    useFrame(() => (mesh.current.rotation.x = mesh.current.rotation.y += 0.01))\r\n\r\n    return (\r\n        <mesh\r\n        {...props}\r\n        ref={mesh}\r\n        scale={active ? [1.5 * boxScale, 1.5 * boxScale, 1.5 * boxScale] : [1 * boxScale, 1 * boxScale, 1 * boxScale]}\r\n        onClick={e => setActive(!active)}\r\n        onPointerOver={e => setHover(true)}\r\n        onPointerOut={e => setHover(false)}>\r\n        <boxBufferGeometry attach=\"geometry\" args={[1, 1, 1]} />\r\n        <meshStandardMaterial attach=\"material\" color={hovered ? 'hotpink' : 'orange'} />\r\n      </mesh>\r\n    )\r\n  }","import { Box } from './'\r\nimport React from 'react'\r\nimport { Canvas }  from 'react-three-fiber'\r\nimport { Provider, useStore } from 'react-redux'\r\n\r\nexport default () => {\r\n\r\n    const store = useStore()\r\n\r\n    return(\r\n        <Canvas style={{height: '40vmin'}}>\r\n            <Provider store={store}>\r\n                <ambientLight />\r\n                <pointLight position={[10, 10, 10]} />\r\n                <Box position={[-4, 0, 0]} />\r\n                <Box position={[4, 0, 0]} />\r\n            </Provider>\r\n        </Canvas>\r\n    )\r\n}","import React from 'react'\r\nimport logo from './logo.svg'\r\nimport './App.css'\r\nimport { useSelector } from 'react-redux'\r\nimport { UserDetails } from './components/UserDetails'\r\nimport { ThreeScene } from './components/ThreeScene'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Container from 'react-bootstrap/Container'\r\nimport styled from 'styled-components'\r\n\r\nconst StyledDiv = styled.div`\r\n  display: block;\r\n  text-align: center;\r\n  font-size: 30px;\r\n  margin-left: 15px;\r\n  margin-right: 15px;\r\n`\r\n\r\nexport default () => {\r\n\r\n  const { userId } = useSelector(state => state.auth)\r\n\r\n  return (\r\n      <Container fluid>\r\n        { !userId && <Row className=\"justify-content-center\"><img src={logo} className=\"App-logo\" alt=\"logo\" /></Row> }\r\n        { userId && <Row><ThreeScene /></Row> }\r\n        <Row className=\"mb-3\">\r\n          <StyledDiv>A dockerized state-of-the-art react application with react 16, JWT token, redux, fake-backend, styled components and react testing library</StyledDiv>\r\n        </Row>\r\n        { userId && <UserDetails /> }\r\n      </Container>\r\n  )\r\n}","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport { Provider } from 'react-redux'\r\nimport { store } from './helpers'\r\nimport { configureFakeBackend } from './helpers'\r\nimport config from 'react-global-configuration'\r\nimport { configuration } from './config/dev'\r\nimport { default as App } from './App'\r\nimport { MenuBar } from './components/MenuBar'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\n\r\nconst rootElement = document.getElementById('root')\r\n\r\nconfig.set(configuration)\r\n\r\nif(config.get('configureFakeBackend')){\r\n    console.warn(\"WARNING: fake backend activated with dev config !!!\")\r\n    console.log(`fake backend URL: ${config.get('apiUrl')}`)\r\n    configureFakeBackend();\r\n}\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <MenuBar />\r\n        <App />\r\n    </Provider>,\r\n    rootElement\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();","export const configuration = {\r\n    \"apiUrl\": \"http://fake-backend:5000\",\r\n    \"configureFakeBackend\": true\r\n}","import React from \"react\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faSignInAlt } from '@fortawesome/free-solid-svg-icons'\r\nimport { faSignOutAlt } from '@fortawesome/free-solid-svg-icons'\r\nimport './MenuBar.css';\r\nimport { authActions } from '../../actions'\r\nimport Navbar from 'react-bootstrap/Navbar'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Nav from 'react-bootstrap/Nav'\r\nimport Form from 'react-bootstrap/Form'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\n\r\nexport default () => {\r\n  \r\n  const dispatch = useDispatch()\r\n\r\n  const { userId } = useSelector(state => state.auth)\r\n\r\n  return (\r\n    <Navbar expand=\"lg\" variant=\"dark\" bg=\"dark\">\r\n        <Navbar.Brand>React-demo</Navbar.Brand>\r\n        <Nav className=\"mr-auto\">\r\n          {/* no content yet*/}\r\n        </Nav>\r\n        <Form inline>\r\n          <Button onClick={() => userId? dispatch(authActions.logout()) : dispatch(authActions.login('vo3xel', '123456'))}>\r\n            <FontAwesomeIcon icon={userId? faSignOutAlt : faSignInAlt} /> { userId? \"logout\": \"login\" }\r\n          </Button>\r\n        </Form>\r\n    </Navbar>\r\n  )\r\n}","module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";"],"sourceRoot":""}